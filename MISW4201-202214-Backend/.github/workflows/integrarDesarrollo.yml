name: Integracion continua proyecto E-Porra
on:
  push:
    branches:
      - tmp_**

jobs:    
  job1:
    if: ${{ startsWith(github.event.head_commit.message, 'Integracion') }}
    name: Merge de desarrollo al ambiente de features tmp_ 
    runs-on: ubuntu-latest
    steps:
      - name: git checkout release
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Extraer branch name tmp_
        shell: bash 
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch_tmp
    
      - name: Merge desarrollo -> tmp_
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          source-branch: develop
          target-branch: ${{ steps.extract_branch_tmp.outputs.branch }}

  job2:
    needs: job1
    name: Ejecutar pruebas del ambiente de features tmp_
    runs-on: ubuntu-latest
    outputs:
      salida: ${{ steps.imprimir.outputs.respuesta }}
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
      - name: Configuración de entorno de python
        uses: actions/setup-python@v2
        with:
            python-version: '3.7'
            
      - name: Instalación de librerías y dependencias 
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Correr pruebas unitarias tmp_
        id: correr-pruebas-tmp
        run: |
            git pull -f
            python -m unittest discover -s tests -v
            
      - name: Validar resultado con errores tmp_
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: Una o varias pruebas fallaron
        run: echo "::set-output name=respuesta::${MENSAJE_ERROR}"

      - name: Validar resultado sin errores tmp
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: Todas las pruebas fueron exitosas
        run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"

      - name: Cálculo de cubrimiento tmp_
        id: cubrimiento-tmp
        run: |
            coverage run -m unittest discover -s tests -v
            coverage report -m
  
  job3:
    needs: job2
    name: Merge del ambiente de features tmp_ a desarrollo
    runs-on: ubuntu-latest
    steps:
      - name: Extraer branch name tmp_
        shell: bash 
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})" 
        id: extract_branch_tmp

      - name: Merge temporal -> desarrollo
        uses: tukasz/direct-merge-action@master
        with: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          source-branch: ${{ steps.extract_branch_tmp.outputs.branch }}
          target-branch: develop

  job4:
    needs: job3
    name: Ejecutar pruebas en desarrollo
    runs-on: ubuntu-latest
    outputs:
      salida: ${{ steps.imprimir.outputs.respuesta }}
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
      
      - name: Configuración de entorno de python
        uses: actions/setup-python@v2
        with:
            python-version: '3.7'
            
      - name: Instalación de librerías y dependencias 
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Correr pruebas unitarias desarrollo
        id: correr-pruebas-desarrollo
        run: |
            pip install -r requirements.txt
            git branch develop
            git checkout develop
            git pull https://github.com/${{ github.repository }}/ develop
            python -m unittest discover -s tests -v
            git branch -v

      - name: Validar resultado con errores desarrollo
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: Una o varias pruebas fallaron
        run: echo "::set-output name=respuesta::${MENSAJE_ERROR}"

      - name: Validar resultado sin errores desarrollo
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: Todas las pruebas fueron exitosas
        run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"

      - name: Cálculo de cubrimiento desarrollo
        id: cubrimiento-desarrollo
        run: |
            git checkout develop
            coverage run -m unittest discover -s tests -v
            coverage report -m
